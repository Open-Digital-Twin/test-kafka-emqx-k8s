apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    service: kafka
  name: kafka
spec:
  serviceName: kafka
  replicas: 1
  selector:
    matchLabels:
      service: kafka
  template:
    metadata:
      labels:
        network/kafka-network: "true"
        service: kafka
    spec:
      enableServiceLinks: false
      containers:
      - name: kafka
        imagePullPolicy: IfNotPresent
        image: {{ .Values.confluent.kafka }}:{{ .Values.confluent.version }}
        ports:
          - containerPort: 29092
          - containerPort: 9092
        env:
          - name: CONFLUENT_SUPPORT_CUSTOMER_ID
            value: "anonymous"
          - name: KAFKA_ADVERTISED_LISTENERS
            value: "INTERNAL://kafka:29092,LISTENER_EXTERNAL://localhost:9092"
          - name: KAFKA_AUTO_CREATE_TOPICS_ENABLE
            value: "true"
          - name: KAFKA_BROKER_ID
            value: "1"
          - name: KAFKA_DEFAULT_REPLICATION_FACTOR
            value: "1"
          - name: KAFKA_INTER_BROKER_LISTENER_NAME
            value: "INTERNAL"
          - name: KAFKA_LISTENERS
            value: "INTERNAL://:29092,LISTENER_EXTERNAL://:9092"
          - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
            value: "INTERNAL:PLAINTEXT,LISTENER_EXTERNAL:PLAINTEXT"
          - name: KAFKA_NUM_PARTITIONS
            value: "1"
          - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
            value: "1"
          - name: KAFKA_LOG_CLEANUP_POLICY
            value: "compact"
          - name: KAFKA_ZOOKEEPER_CONNECT
            value: "zookeeper:2181"
        resources: {}
        volumeMounts:
          - name: kafka-data
            mountPath: /kafka/data
          - name: kafka-plugins
            mountPath: /usr/local/share/kafka/plugins
      - name: kafka-connect
        imagePullPolicy: IfNotPresent
        image: {{ .Values.confluent.kafkaConnect }}:{{ .Values.confluent.version }}
        env:
          - name: CONNECT_BOOTSTRAP_SERVERS
            value: "INTERNAL://kafka:29092"
          - name: CONNECT_REST_PORT
            value: "8083"
          - name: CONNECT_GROUP_ID
            value: "quickstart"
          - name: CONNECT_CONFIG_STORAGE_TOPIC
            value: "quickstart-config"
          - name: CONNECT_OFFSET_STORAGE_TOPIC
            value: "quickstart-offsets"
          - name: CONNECT_STATUS_STORAGE_TOPIC
            value: "quickstart-status"
          - name: CONNECT_KEY_CONVERTER
            value: "org.apache.kafka.connect.json.JsonConverter"
          - name: CONNECT_VALUE_CONVERTER
            value: "org.apache.kafka.connect.json.JsonConverter"
          - name: CONNECT_INTERNAL_KEY_CONVERTER
            value: "org.apache.kafka.connect.json.JsonConverter"
          - name: CONNECT_INTERNAL_VALUE_CONVERTER
            value: "org.apache.kafka.connect.json.JsonConverter"
          - name: CONNECT_REST_ADVERTISED_HOST_NAME
            value: "localhost"
          - name: CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR
            value: "1"
          - name: CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR
            value: "1"
          - name: CONNECT_STATUS_STORAGE_REPLICATION_FACTOR
            value: "1"
          - name: CONNECT_PLUGIN_PATH
            value: '/usr/share/java,/etc/kafka-connect/jars,/plugins'
          - name: CONNECT_CONFLUENT_TOPIC_REPLICATION_FACTOR
            value: "1"
        resources: {}
      hostname: kafka
      restartPolicy: Always
      nodeName: molejo
      nodeSelector:
        nodetype: server
  volumeClaimTemplates:
    - metadata:
        name: kafka-data
      spec:
        accessModes:
          - ReadWriteOnce
        storageClassName: "rook-ceph-block"
        resources:
          requests:
            storage: 1Gi
    - metadata:
        name: kafka-plugins
      spec:
        accessModes:
          - ReadWriteOnce
        storageClassName: "rook-ceph-block"
        resources:
          requests:
            storage: 250Mi